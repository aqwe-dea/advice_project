"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterator
from typing import Any, Union
from django.contrib.staticfiles.storage import ManifestStaticFilesStorage, StaticFilesStorage
from whitenoise.compress import Compressor

_PostProcessT = Iterator[Union[tuple[str, str, bool], tuple[str, None, RuntimeError]]]
class CompressedStaticFilesStorage(StaticFilesStorage):
    """
    StaticFilesStorage subclass that compresses output files.
    """
    def post_process(self, paths: dict[str, Any], dry_run: bool = ..., **options: Any) -> _PostProcessT:
        ...
    
    def create_compressor(self, **kwargs: Any) -> Compressor:
        ...
    


class MissingFileError(ValueError):
    ...


class CompressedManifestStaticFilesStorage(ManifestStaticFilesStorage):
    """
    Extends ManifestStaticFilesStorage instance to create compressed versions
    of its output files and, optionally, to delete the non-hashed files (i.e.
    those without the hash in their name)
    """
    _new_files = ...
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def post_process(self, *args, **kwargs): # -> Generator[tuple[Any | str, Any | str, MissingFileError | ValueError | Any | bool], Any, None]:
        ...
    
    def post_process_with_compression(self, files): # -> Generator[tuple[Any, Any, Any | Exception] | tuple[str, str, Literal[True]], Any, None]:
        ...
    
    def hashed_name(self, *args, **kwargs): # -> str:
        ...
    
    def start_tracking_new_files(self, new_files): # -> None:
        ...
    
    def stop_tracking_new_files(self): # -> None:
        ...
    
    @property
    def keep_only_hashed_files(self): # -> Any | bool:
        ...
    
    def delete_files(self, files_to_delete): # -> None:
        ...
    
    def create_compressor(self, **kwargs): # -> Compressor:
        ...
    
    def compress_files(self, paths): # -> Generator[tuple[str, str], Any, None]:
        ...
    
    def make_helpful_exception(self, exception, name): # -> MissingFileError | ValueError:
        """
        If a CSS file contains references to images, fonts etc that can't be found
        then Django's `post_process` blows up with a not particularly helpful
        ValueError that leads people to think WhiteNoise is broken.

        Here we attempt to intercept such errors and reformat them to be more
        helpful in revealing the source of the problem.
        """
        ...
    
    _error_msg_re = ...
    _error_msg = ...


