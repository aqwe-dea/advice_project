"""
This type stub file was generated by pyright.
"""

from io import BufferedIOBase

class Response:
    __slots__ = ...
    def __init__(self, status, headers, file) -> None:
        ...
    


NOT_ALLOWED_RESPONSE = ...
NOT_MODIFIED_HEADERS = ...
class SlicedFile(BufferedIOBase):
    """
    A file like wrapper to handle seeking to the start byte of a range request
    and to return no further output once the end byte of a range request has
    been reached.
    """
    def __init__(self, fileobj, start, end) -> None:
        ...
    
    def read(self, size=...): # -> Literal[b""]:
        ...
    
    def close(self): # -> None:
        ...
    


class StaticFile:
    def __init__(self, path, headers, encodings=..., stat_cache=...) -> None:
        ...
    
    def get_response(self, method, request_headers): # -> Response:
        ...
    
    def get_range_response(self, range_header, base_headers, file_handle): # -> Response:
        ...
    
    def get_byte_range(self, range_header, size): # -> tuple[int, Any | int]:
        ...
    
    @staticmethod
    def parse_byte_range(range_header): # -> tuple[int, int | None]:
        ...
    
    @staticmethod
    def get_range_not_satisfiable_response(file_handle, size): # -> Response:
        ...
    
    @staticmethod
    def get_file_stats(path, encodings, stat_cache): # -> dict[None, FileEntry]:
        ...
    
    def get_headers(self, headers_list, files): # -> Headers:
        ...
    
    @staticmethod
    def get_not_modified_response(headers): # -> Response:
        ...
    
    @staticmethod
    def get_alternatives(base_headers, files): # -> list[Any]:
        ...
    
    def is_not_modified(self, request_headers): # -> bool:
        ...
    
    def get_path_and_headers(self, request_headers): # -> tuple[Any, Any] | None:
        ...
    


class Redirect:
    def __init__(self, location, headers=...) -> None:
        ...
    
    def get_response(self, method, request_headers): # -> Response:
        ...
    


class NotARegularFileError(Exception):
    ...


class MissingFileError(NotARegularFileError):
    ...


class IsDirectoryError(MissingFileError):
    ...


class FileEntry:
    __slots__ = ...
    def __init__(self, path, stat_cache=...) -> None:
        ...
    
    @staticmethod
    def stat_regular_file(path, stat_function):
        """
        Wrap `stat_function` to raise appropriate errors if `path` is not a
        regular file
        """
        ...
    


