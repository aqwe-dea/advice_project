"""
This type stub file was generated by pyright.
"""

from typing import Callable
from wsgiref.headers import Headers

class WhiteNoise:
    FOREVER = ...
    def __init__(self, application, root=..., prefix=..., *, autorefresh: bool = ..., max_age: int | None = ..., allow_all_origins: bool = ..., charset: str = ..., mimetypes: dict[str, str] | None = ..., add_headers_function: Callable[[Headers, str, str], None] | None = ..., index_file: str | bool | None = ..., immutable_file_test: Callable | str | None = ...) -> None:
        ...
    
    def __call__(self, environ, start_response): # -> list[Any]:
        ...
    
    @staticmethod
    def serve(static_file, environ, start_response): # -> list[Any]:
        ...
    
    def add_files(self, root, prefix=...): # -> None:
        ...
    
    def update_files_dictionary(self, root, prefix): # -> None:
        ...
    
    def add_file_to_dictionary(self, url, path, stat_cache=...): # -> None:
        ...
    
    def find_file(self, url): # -> StaticFile | Redirect | None:
        ...
    
    def candidate_paths_for_url(self, url): # -> Generator[Any, Any, None]:
        ...
    
    def find_file_at_path(self, path, url): # -> StaticFile | Redirect:
        ...
    
    @staticmethod
    def url_is_canonical(url): # -> Literal[False]:
        """
        Check that the URL path is in canonical format i.e. has normalised
        slashes and no path traversal elements
        """
        ...
    
    @staticmethod
    def is_compressed_variant(path, stat_cache=...): # -> bool:
        ...
    
    def get_static_file(self, path, url, stat_cache=...): # -> StaticFile:
        ...
    
    def add_mime_headers(self, headers, path, url): # -> None:
        ...
    
    def add_cache_headers(self, headers, path, url): # -> None:
        ...
    
    def immutable_file_test(self, path, url): # -> Literal[False]:
        """
        This should be implemented by sub-classes (see e.g. WhiteNoiseMiddleware)
        or by setting the `immutable_file_test` config option
        """
        ...
    
    def redirect(self, from_url, to_url): # -> Redirect:
        """
        Return a relative 302 redirect

        We use relative redirects as we don't know the absolute URL the app is
        being hosted under
        """
        ...
    


def scantree(root): # -> Generator[Any | tuple[str, stat_result], Any, None]:
    """
    Recurse the given directory yielding (pathname, os.stat(pathname)) pairs
    """
    ...

